-- sample directory for *.frm in development
local root = [[C:\Users\username\frmpath]]

-- utilities
local psep = package.config:sub(1,1)
local cat = table.concat
local function catPath(...)
  return (cat({...},psep):gsub("[/\\]+",psep))
end

FRM_IO = {
  quoteFRM = function(fn)
    local f = io.open(fn,'rb')
    local s = f and f:read"a",f and f:close()
    return s and "'"..s:gsub("['\\\0-\31\128-\255]",function(c)
      return string.format([[\x%02X]],c:byte())
    end).."'", s and s:len()
  end,
  fromString = function(s, loader)
    local tmpdir = os.getenv"TEMP" or os.getenv"TMP" or "."
    local tmpfn = cat{'_',math.random(100000,999999),os.time()}
    tmpfn = catPath(tmpdir, tmpfn)
    local f = io.open(tmpfn,'wb')
    local ok = f and f:write(s) and true,f and f:close()
    return ok and (loader or createFormFromFile)(tmpfn), os.remove(tmpfn)
  end
}

-- make quoted string of the *.FRM file
local quoteStr,len = FRM_IO.quoteFRM(catPath(root,"SavedFormTest.FRM"))

--- print(quoteStr) and c & p quoteStr in source
local frmStr = '<?xml version="1.0" encoding="utf-8"?><FormData><UDF1 Class="TCEForm" Encoding="Ascii85">wUx[H6G0rux4Wg:2M,}.kHln73I[-,Ef6D]wtx[@G/1/fG-lgQ,l6,gZl@pvc?RXz:zm}5aS:Hf4_=:JFfnHPC-?I_cDl2)Yu8:k#csDdJ4wHv?9!{*e2C,u=EJVWrRV06R]ajU(PV-Au!Mz(LSO,Z/q8)oeS)DQ!jP_PO*27vFyre/7O:7f)?4b^s+2)C,;,A3DYO$6)^ddvNDXwg/*Yo]ssdGP2{S6.rIV_m=L{3R8:EOv6N3$$tZvJ?jqp-;:@oS=Z6Pr;+1pEMuw-HW08,E)t{)L+T-z*kpkDc6(mxAk##jz)idt@=0*yk@lZd9]qs0B:Ce,5?4h.CffBJIaHlKRq],{03U*G9H/2lYfo_q92(zs?!4}%HK%+:o1oZ%$(/JL2BJ#Xy,^Sz4,g4TilkqpTDXYzOf$lIZQ,S:ETL2FMxA?]{5D/8+(h@tf,W2A:IfaaLL!aQ9vJeAE1-=2+W(lO{/Tvkbq3!CCVyOkbU8pfne.$2B+@iMiT%3q^F4pw0Sd$3^-mcVhrcCO[-tOm]e8B;Lk]ivHT#hIw2h3d^A3;MW5f]i3KR?O-Srco7XK@Ili_J6;[Bc@*8R%MDnLf0Lt5u%!_z]]bJhln{MvrgyPs@kX?=QcvwV],!)%4MY;=bczC/fkI5Whf4r39]iKyqzPzCpYHG^mHnuEUuVAAcvc)H#O#?c6m{K9P5Bmd2/WmSL_r-BUA$mGAXzxcf!dHcyi.E%XM-uGw!.?=akF8Dc;.2$t4Izyy0.tTy$-H6MUY5FB.%!2F{]Po;dwJq!m4yKkjIL={kcHqQ5iLFRZXP=bViSVziL.4l(@jG2^uIr2F,7M{ohaRN.]buovheM.cgxTjaC;!=(ACwRlFVC!IdRo/63ik0XbVFgxR),CGLX9}nj6kil?SqLlDR=/^KOt1#6pm7oTTA#Yn#bbgR7@Ul8oZL/-V4TUZP.Vsv;qkLdRTD7yaCS$09QJ_lYBjKQZ4)#d2]n!MIT(CU2?]IJ-rCT}!StKae(Zx==vnt(#fztLDUONK*#R8qN]2DmBqoB3lIwYssd.QpDTb7g;*Pm,SO4f:o5c@GUblUhOC-H9</UDF1></FormData>'

local frm = FRM_IO.fromString(frmStr)
if frm then frm.show()end

function GetTheProcessList()
local T = {}
  local SL=createStringlist()
  getProcesslist(SL)

   for i=0,strings_getCount(SL)-1 do
      T[i] = strings_getString(SL,i)
    end
  return T
end


function UDF1_CEButton1Click(sender)
  local PL = GetTheProcessList()
  local S = {}
  local variable = "Conquer.exe"
  UDF1_CEListBox1.Clear()
  UDF1_CEListBox2.Clear()
  for x = 0, #PL do
        if variable == "All"
        then
         UDF1_CEListBox1.Items.Add(PL[x])
        else

           if string.sub(PL[x],10) == variable
            then
            S[#S+1] = PL[x]  --list for reference
            UDF1_CEListBox1.Items.Add(PL[x])
            end
        end
     end
     UDF1_CEListBox1.Items.Add(" ")--1
     UDF1_CEListBox1.Items.Add(" ")--2
     UDF1_CEListBox1.Items.Add(" ")--3
     UDF1_CEListBox1.Items.Add(" ")--4
     UDF1_CEListBox1.Items.Add(" ")--5
     UDF1_CEListBox1.Items.Add(" ")--6
     UDF1_CEListBox1.Items.Add(" ")--7
     UDF1_CEListBox1.Items.Add(" ")--8
     UDF1_CEListBox1.Items.Add(" ")--9
     UDF1_CEListBox1.Items.Add(" ")--10
     UDF1_CEListBox1.Items.Add(" ")--1
     UDF1_CEListBox1.Items.Add(" ")--2
     UDF1_CEListBox1.Items.Add(" ")--3
     UDF1_CEListBox1.Items.Add(" ")--4
     UDF1_CEListBox1.Items.Add(" ")--5
     UDF1_CEListBox1.Items.Add(" ")--6
     UDF1_CEListBox1.Items.Add(" ")--7
     UDF1_CEListBox1.Items.Add(" ")--8
     UDF1_CEListBox1.Items.Add(" ")--9
     UDF1_CEListBox1.Items.Add(" ")--10
     UDF1_CEListBox1.Items.Add(" ")--1
     UDF1_CEListBox1.Items.Add(" ")--2
     UDF1_CEListBox1.Items.Add(" ")--3
     UDF1_CEListBox1.Items.Add(" ")--4
     UDF1_CEListBox1.Items.Add(" ")--5
     UDF1_CEListBox1.Items.Add(" ")--6
     UDF1_CEListBox1.Items.Add(" ")--7
     UDF1_CEListBox1.Items.Add(" ")--8
     UDF1_CEListBox1.Items.Add(" ")--9
     UDF1_CEListBox1.Items.Add(" ")--10
     local b1 = string.sub(UDF1_CEListBox1.Items[0],0,8)
     b1 = tonumber(b1,16)
     openProcess(b1)
     if ReadInteger("TQPlat.dll+1000") == 1374456661 then
AutoAssemble[[//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
ret
mov ebp,esp
push ecx
push 2628BF93

exit:
jmp returnhere

"TQPlat.dll"+1000:
jmp newmem
nop 4
returnhere:]]
end
D1=((ReadString("017B44FC")or"None"))
UDF1_CEListBox2.Items.Add(D1)--1
local b2 = string.sub(UDF1_CEListBox1.Items[1],0,8)
     b2 = tonumber(b2,16)
     openProcess(b2)
     if ReadInteger("TQPlat.dll+1000") == 1374456661 then
AutoAssemble[[//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
ret
mov ebp,esp
push ecx
push 2628BF93

exit:
jmp returnhere

"TQPlat.dll"+1000:
jmp newmem
nop 4
returnhere:]]
end
D2=((ReadString("017B44FC")or"None"))
if  b2 ~= b1 then
if  b2 ~= nil then
UDF1_CEListBox2.Items.Add(D2)--2
end
end
local b3 = string.sub(UDF1_CEListBox1.Items[2],0,8)
      b3 = tonumber(b3,16)
     openProcess(b3)
          D=ReadInteger("TQPlat.dll+1000")
     if ReadInteger("TQPlat.dll+1000") == 1374456661 then
AutoAssemble[[//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
ret
mov ebp,esp
push ecx
push 2628BF93

exit:
jmp returnhere

"TQPlat.dll"+1000:
jmp newmem
nop 4
returnhere:]]
end
D3=((ReadString("017B44FC")or"None"))
if  b3 ~= b2 then
if  b3 ~= nil then
UDF1_CEListBox2.Items.Add(D3)--3
end
end
local b4 = string.sub(UDF1_CEListBox1.Items[3],0,8)
      b4 = tonumber(b4,16)
     openProcess(b4)
          D=ReadInteger("TQPlat.dll+1000")
     if ReadInteger("TQPlat.dll+1000") == 1374456661 then
AutoAssemble[[//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
ret
mov ebp,esp
push ecx
push 2628BF93

exit:
jmp returnhere

"TQPlat.dll"+1000:
jmp newmem
nop 4
returnhere:]]
end
D4=((ReadString("017B44FC")or"None"))
if  b4 ~= b3 then
if  b4 ~= nil then
UDF1_CEListBox2.Items.Add(D4)--4
end
end
local b5 = string.sub(UDF1_CEListBox1.Items[4],0,8)
      b5 = tonumber(b5,16)
     openProcess(b5)
          D=ReadInteger("TQPlat.dll+1000")
     if ReadInteger("TQPlat.dll+1000") == 1374456661 then
AutoAssemble[[//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
ret
mov ebp,esp
push ecx
push 2628BF93

exit:
jmp returnhere

"TQPlat.dll"+1000:
jmp newmem
nop 4
returnhere:]]
end
D5=((ReadString("017B44FC")or"None"))
if  b5 ~= b4 then
if  b5 ~= nil then
UDF1_CEListBox2.Items.Add(D5)--5
end
end
local b6 = string.sub(UDF1_CEListBox1.Items[5],0,8)
      b6 = tonumber(b6,16)
     openProcess(b6)
          D=ReadInteger("TQPlat.dll+1000")
     if ReadInteger("TQPlat.dll+1000") == 1374456661 then
AutoAssemble[[//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
ret
mov ebp,esp
push ecx
push 2628BF93

exit:
jmp returnhere

"TQPlat.dll"+1000:
jmp newmem
nop 4
returnhere:]]
end
D6=((ReadString("017B44FC")or"None"))
if  b6 ~= b5 then
if  b6 ~= nil then
UDF1_CEListBox2.Items.Add(D6)--6
end
end
local b7 = string.sub(UDF1_CEListBox1.Items[6],0,8)
      b7 = tonumber(b7,16)
     openProcess(b7)
          D=ReadInteger("TQPlat.dll+1000")
     if ReadInteger("TQPlat.dll+1000") == 1374456661 then
AutoAssemble[[//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
ret
mov ebp,esp
push ecx
push 2628BF93

exit:
jmp returnhere

"TQPlat.dll"+1000:
jmp newmem
nop 4
returnhere:]]
end
D7=((ReadString("017B44FC")or"None"))
if  b7 ~= b6 then
if  b7 ~= nil then
UDF1_CEListBox2.Items.Add(D7)--7
end
end
local b8 = string.sub(UDF1_CEListBox1.Items[7],0,8)
      b8 = tonumber(b8,16)
     openProcess(b8)
          D=ReadInteger("TQPlat.dll+1000")
     if ReadInteger("TQPlat.dll+1000") == 1374456661 then
AutoAssemble[[//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
ret
mov ebp,esp
push ecx
push 2628BF93

exit:
jmp returnhere

"TQPlat.dll"+1000:
jmp newmem
nop 4
returnhere:]]
end
D8=((ReadString("017B44FC")or"None"))
if  b8 ~= b7 then
if  b8 ~= nil then
UDF1_CEListBox2.Items.Add(D8)--8
end
end
local b9 = string.sub(UDF1_CEListBox1.Items[8],0,8)
      b9 = tonumber(b9,16)
     openProcess(b9)
          D=ReadInteger("TQPlat.dll+1000")
     if ReadInteger("TQPlat.dll+1000") == 1374456661 then
AutoAssemble[[//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
ret
mov ebp,esp
push ecx
push 2628BF93

exit:
jmp returnhere

"TQPlat.dll"+1000:
jmp newmem
nop 4
returnhere:]]
end
D9=((ReadString("017B44FC")or"None"))
if  b9 ~= b8 then
if  b9 ~= nil then
UDF1_CEListBox2.Items.Add(D9)--9
end
end
local b10 = string.sub(UDF1_CEListBox1.Items[9],0,8)
      b10 = tonumber(b10,16)
     openProcess(b10)
          D=ReadInteger("TQPlat.dll+1000")
     if ReadInteger("TQPlat.dll+1000") == 1374456661 then
AutoAssemble[[//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
ret
mov ebp,esp
push ecx
push 2628BF93

exit:
jmp returnhere

"TQPlat.dll"+1000:
jmp newmem
nop 4
returnhere:]]
end
D10=((ReadString("017B44FC")or"None"))
if  b10 ~= b9 then
if  b10 ~= nil then
UDF1_CEListBox2.Items.Add(D10)--10
end
end
local b11 = string.sub(UDF1_CEListBox1.Items[10],0,8)
      b11 = tonumber(b11,16)
     openProcess(b11)
          D=ReadInteger("TQPlat.dll+1000")
     if ReadInteger("TQPlat.dll+1000") == 1374456661 then
AutoAssemble[[//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
ret
mov ebp,esp
push ecx
push 2628BF93

exit:
jmp returnhere

"TQPlat.dll"+1000:
jmp newmem
nop 4
returnhere:]]
end
D11=((ReadString("017B44FC")or"None"))
if  b11 ~= b10 then
if  b11 ~= nil then
UDF1_CEListBox2.Items.Add(D11)--1
end
end
local b12 = string.sub(UDF1_CEListBox1.Items[11],0,8)
      b12 = tonumber(b12,16)
     openProcess(b12)
          D=ReadInteger("TQPlat.dll+1000")
     if ReadInteger("TQPlat.dll+1000") == 1374456661 then
AutoAssemble[[//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
ret
mov ebp,esp
push ecx
push 2628BF93

exit:
jmp returnhere

"TQPlat.dll"+1000:
jmp newmem
nop 4
returnhere:]]
end
D12=((ReadString("017B44FC")or"None"))
if  b12 ~= b11 then
if  b12 ~= nil then
UDF1_CEListBox2.Items.Add(D12)--2
end
end
local b13 = string.sub(UDF1_CEListBox1.Items[12],0,8)
      b13 = tonumber(b13,16)
     openProcess(b13)
          D=ReadInteger("TQPlat.dll+1000")
     if ReadInteger("TQPlat.dll+1000") == 1374456661 then
AutoAssemble[[//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
ret
mov ebp,esp
push ecx
push 2628BF93

exit:
jmp returnhere

"TQPlat.dll"+1000:
jmp newmem
nop 4
returnhere:]]
end
D13=((ReadString("017B44FC")or"None"))
if  b13 ~= b12 then
if  b13 ~= nil then
UDF1_CEListBox2.Items.Add(D13)--3
end
end
local b14 = string.sub(UDF1_CEListBox1.Items[13],0,8)
      b14 = tonumber(b14,16)
     openProcess(b14)
          D=ReadInteger("TQPlat.dll+1000")
     if ReadInteger("TQPlat.dll+1000") == 1374456661 then
AutoAssemble[[//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
ret
mov ebp,esp
push ecx
push 2628BF93

exit:
jmp returnhere

"TQPlat.dll"+1000:
jmp newmem
nop 4
returnhere:]]
end
D14=((ReadString("017B44FC")or"None"))
if  b14 ~= b13 then
if  b14 ~= nil then
UDF1_CEListBox2.Items.Add(D14)--4
end
end
local b15 = string.sub(UDF1_CEListBox1.Items[14],0,8)
      b15 = tonumber(b15,16)
     openProcess(b15)
          D=ReadInteger("TQPlat.dll+1000")
     if ReadInteger("TQPlat.dll+1000") == 1374456661 then
AutoAssemble[[//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
ret
mov ebp,esp
push ecx
push 2628BF93

exit:
jmp returnhere

"TQPlat.dll"+1000:
jmp newmem
nop 4
returnhere:]]
end
D15=((ReadString("017B44FC")or"None"))
if  b15 ~= b14 then
if  b15 ~= nil then
UDF1_CEListBox2.Items.Add(D15)--5
end
end
local b16 = string.sub(UDF1_CEListBox1.Items[15],0,8)
      b16 = tonumber(b16,16)
     openProcess(b16)
          D=ReadInteger("TQPlat.dll+1000")
     if ReadInteger("TQPlat.dll+1000") == 1374456661 then
AutoAssemble[[//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
ret
mov ebp,esp
push ecx
push 2628BF93

exit:
jmp returnhere

"TQPlat.dll"+1000:
jmp newmem
nop 4
returnhere:]]
end
D16=((ReadString("017B44FC")or"None"))
if  b16 ~= b15 then
if  b16 ~= nil then
UDF1_CEListBox2.Items.Add(D16)--6
end
end
local b17 = string.sub(UDF1_CEListBox1.Items[16],0,8)
      b17 = tonumber(b17,16)
     openProcess(b17)
          D=ReadInteger("TQPlat.dll+1000")
     if ReadInteger("TQPlat.dll+1000") == 1374456661 then
AutoAssemble[[//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
ret
mov ebp,esp
push ecx
push 2628BF93

exit:
jmp returnhere

"TQPlat.dll"+1000:
jmp newmem
nop 4
returnhere:]]
end
D17=((ReadString("017B44FC")or"None"))
if  b17 ~= b16 then
if  b17 ~= nil then
UDF1_CEListBox2.Items.Add(D17)--7
end
end
local b18 = string.sub(UDF1_CEListBox1.Items[17],0,8)
      b18 = tonumber(b18,16)
     openProcess(b18)
          D=ReadInteger("TQPlat.dll+1000")
     if ReadInteger("TQPlat.dll+1000") == 1374456661 then
AutoAssemble[[//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
ret
mov ebp,esp
push ecx
push 2628BF93

exit:
jmp returnhere

"TQPlat.dll"+1000:
jmp newmem
nop 4
returnhere:]]
end
D18=((ReadString("017B44FC")or"None"))
if  b18 ~= b17 then
if  b18 ~= nil then
UDF1_CEListBox2.Items.Add(D18)--8
end
end
local b19 = string.sub(UDF1_CEListBox1.Items[18],0,8)
      b19 = tonumber(b19,16)
     openProcess(b19)
          D=ReadInteger("TQPlat.dll+1000")
     if ReadInteger("TQPlat.dll+1000") == 1374456661 then
AutoAssemble[[//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
ret
mov ebp,esp
push ecx
push 2628BF93

exit:
jmp returnhere

"TQPlat.dll"+1000:
jmp newmem
nop 4
returnhere:]]
end
D19=((ReadString("017B44FC")or"None"))
if  b19 ~= b18 then
if  b19 ~= nil then
UDF1_CEListBox2.Items.Add(D19)--9
end
end
local b20 = string.sub(UDF1_CEListBox1.Items[19],0,8)
     b20 = tonumber(b20,16)
     openProcess(b20)
          D=ReadInteger("TQPlat.dll+1000")
     if ReadInteger("TQPlat.dll+1000") == 1374456661 then
AutoAssemble[[//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
ret
mov ebp,esp
push ecx
push 2628BF93

exit:
jmp returnhere

"TQPlat.dll"+1000:
jmp newmem
nop 4
returnhere:]]
end
D20=((ReadString("017B44FC")or"None"))
if  b20 ~= b19 then
if  b20 ~= nil then
UDF1_CEListBox2.Items.Add(D20)--10
end
end
local b21 = string.sub(UDF1_CEListBox1.Items[20],0,8)
      b21 = tonumber(b21,16)
     openProcess(b21)
          D=ReadInteger("TQPlat.dll+1000")
     if ReadInteger("TQPlat.dll+1000") == 1374456661 then
AutoAssemble[[//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
ret
mov ebp,esp
push ecx
push 2628BF93

exit:
jmp returnhere

"TQPlat.dll"+1000:
jmp newmem
nop 4
returnhere:]]
end
D21=((ReadString("017B44FC")or"None"))
if  b21 ~= b20 then
if  b21 ~= nil then
UDF1_CEListBox2.Items.Add(D21)--1
end
end
local b22 = string.sub(UDF1_CEListBox1.Items[21],0,8)
      b22 = tonumber(b22,16)
     openProcess(b22)
          D=ReadInteger("TQPlat.dll+1000")
     if ReadInteger("TQPlat.dll+1000") == 1374456661 then
AutoAssemble[[//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
ret
mov ebp,esp
push ecx
push 2628BF93

exit:
jmp returnhere

"TQPlat.dll"+1000:
jmp newmem
nop 4
returnhere:]]
end
D22=((ReadString("017B44FC")or"None"))
if  b22 ~= b21 then
if  b22 ~= nil then
UDF1_CEListBox2.Items.Add(D22)--2
end
end
local b23 = string.sub(UDF1_CEListBox1.Items[22],0,8)
      b23 = tonumber(b23,16)
     openProcess(b23)
          D=ReadInteger("TQPlat.dll+1000")
     if ReadInteger("TQPlat.dll+1000") == 1374456661 then
AutoAssemble[[//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
ret
mov ebp,esp
push ecx
push 2628BF93

exit:
jmp returnhere

"TQPlat.dll"+1000:
jmp newmem
nop 4
returnhere:]]
end
D23=((ReadString("017B44FC")or"None"))
if  b23 ~= b22 then
if  b23 ~= nil then
UDF1_CEListBox2.Items.Add(D23)--3
end
end
local b24 = string.sub(UDF1_CEListBox1.Items[23],0,8)
      b24 = tonumber(b24,16)
     openProcess(b24)
          D=ReadInteger("TQPlat.dll+1000")
     if ReadInteger("TQPlat.dll+1000") == 1374456661 then
AutoAssemble[[//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
ret
mov ebp,esp
push ecx
push 2628BF93

exit:
jmp returnhere

"TQPlat.dll"+1000:
jmp newmem
nop 4
returnhere:]]
end
D24=((ReadString("017B44FC")or"None"))
if  b24 ~= b23 then
if  b24 ~= nil then
UDF1_CEListBox2.Items.Add(D24)--4
end
end
local b25 = string.sub(UDF1_CEListBox1.Items[24],0,8)
      b25 = tonumber(b25,16)
     openProcess(b25)
          D=ReadInteger("TQPlat.dll+1000")
     if ReadInteger("TQPlat.dll+1000") == 1374456661 then
AutoAssemble[[//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
ret
mov ebp,esp
push ecx
push 2628BF93

exit:
jmp returnhere

"TQPlat.dll"+1000:
jmp newmem
nop 4
returnhere:]]
end
D25=((ReadString("017B44FC")or"None"))
if  b25 ~= b24 then
if  b25 ~= nil then
UDF1_CEListBox2.Items.Add(D25)--5
end
end
local b26 = string.sub(UDF1_CEListBox1.Items[25],0,8)
      b26 = tonumber(b26,16)
     openProcess(b26)
          D=ReadInteger("TQPlat.dll+1000")
     if ReadInteger("TQPlat.dll+1000") == 1374456661 then
AutoAssemble[[//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
ret
mov ebp,esp
push ecx
push 2628BF93

exit:
jmp returnhere

"TQPlat.dll"+1000:
jmp newmem
nop 4
returnhere:]]
end
D26=((ReadString("017B44FC")or"None"))
if  b26 ~= b25 then
if  b26 ~= nil then
UDF1_CEListBox2.Items.Add(D26)--6
end
end
local b27 = string.sub(UDF1_CEListBox1.Items[26],0,8)
      b27 = tonumber(b27,16)
     openProcess(b27)
          D=ReadInteger("TQPlat.dll+1000")
     if ReadInteger("TQPlat.dll+1000") == 1374456661 then
AutoAssemble[[//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
ret
mov ebp,esp
push ecx
push 2628BF93

exit:
jmp returnhere

"TQPlat.dll"+1000:
jmp newmem
nop 4
returnhere:]]
end
D27=((ReadString("017B44FC")or"None"))
if  D27 ~= D26 then
if  b27 ~= nil then
UDF1_CEListBox2.Items.Add(D27)--7
end
end
local b28 = string.sub(UDF1_CEListBox1.Items[27],0,8)
      b28 = tonumber(b28,16)
     openProcess(b28)
          D=ReadInteger("TQPlat.dll+1000")
     if ReadInteger("TQPlat.dll+1000") == 1374456661 then
AutoAssemble[[//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
ret
mov ebp,esp
push ecx
push 2628BF93

exit:
jmp returnhere

"TQPlat.dll"+1000:
jmp newmem
nop 4
returnhere:]]
end
D28=((ReadString("017B44FC")or"None"))
if  b28 ~= b27 then
if  b28 ~= nil then
UDF1_CEListBox2.Items.Add(D28)--8
end
end
local b29 = string.sub(UDF1_CEListBox1.Items[28],0,8)
      b29 = tonumber(b29,16)
     openProcess(b29)
          D=ReadInteger("TQPlat.dll+1000")
     if ReadInteger("TQPlat.dll+1000") == 1374456661 then
AutoAssemble[[//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
ret
mov ebp,esp
push ecx
push 2628BF93

exit:
jmp returnhere

"TQPlat.dll"+1000:
jmp newmem
nop 4
returnhere:]]
end
D29=((ReadString("017B44FC")or"None"))
if  b29 ~= b28 then
if  b29 ~= nil then
UDF1_CEListBox2.Items.Add(D29)--9
end
end
local b30 = string.sub(UDF1_CEListBox1.Items[29],0,8)
      b30 = tonumber(b30,16)
     openProcess(b30)
     D=ReadInteger("TQPlat.dll+1000")
     if ReadInteger("TQPlat.dll+1000") == 1374456661 then
AutoAssemble[[//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
ret
mov ebp,esp
push ecx
push 2628BF93

exit:
jmp returnhere

"TQPlat.dll"+1000:
jmp newmem
nop 4
returnhere:]]
end
D30=((ReadString("017B44FC")or"None"))
if  b30 ~= b29 then
if  b30 ~= nil then
UDF1_CEListBox2.Items.Add(D30)--10
end
end
end
--UDF6.Show() --&lt;&lt;------Cancellation

--UDF6_CEButton1Click = GetPros --&lt;&lt;------Cancellation
--UDF1.CEButton7.OnClick = GetPros --&lt;&lt;---- Added


function UDF1_CEButton2Click(sender)
 local a = UDF1_CEListBox2.ItemIndex
    if a ~= -1 -- negative 1 is nno selection
    then
     local b = string.sub(UDF1_CEListBox1.Items[a],0,8)
     b = tonumber(b,16)
     openProcess(b)
AutoAssemble[[//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
ret
mov ebp,esp
push ecx
push 2628BF93

exit:
jmp returnhere

"TQPlat.dll"+1000:
jmp newmem
nop 4
returnhere:]]





    else
   showMessage('الرجاء إختيار الشخصيه')
    end
end
--///////////////////////////////////////////////////

function UDF1_CETimer1Timer(sender)
UDF1.CELabel1.Caption=(ReadString("017B44FC") or ("Not Injected"))
end





UDF1.OnClose = function()
    -- Ensure the application terminates
    UDF1.Destroy()
    -- Optionally, exit Cheat Engine
     os.exit() -- Uncomment if you want to completely exit Cheat Engine
end


UDF1.Show()
--function UDF1_CECheckbox1Click(sender)
  ----
--end

function UDF1_CECheckbox2Change(sender)
--No Stun Code here
if sender.Checked then
        local AntiStun = [[
aobscanmodule(AntiStun,Conquer.exe,89 86 88 03 00 00 FF) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov [esi+00000388],#100
  jmp return

AntiStun:
  jmp newmem
  nop
return:
registersymbol(AntiStun)
]]

        -- Execute the script to enable it
        autoAssemble(AntiStun)

    else
        -- Code to disable the script
        local AntiStun = [[

        AntiStun:
          db 89 86 88 03 00 00

        unregistersymbol(AntiStun)
        dealloc(newmem)
        ]]

        -- Execute the script to disable it
        autoAssemble(AntiStun)
    end

end

function UDF1_CECheckbox3Change(sender)
    -- Check if the checkbox is checked
    if sender.Checked then
        -- Zoom Hack
        local Zoom = [[

        aobscanmodule(INJECT1,Conquer.exe,3D 00 01 00 00 76) // should be unique
        alloc(newmem,$1000)

        label(code)
        label(return)

        newmem:
        code:
          cmp eax,0000064
          jmp return

        INJECT1:
          jmp newmem
        return:
        registersymbol(INJECT1)
        ]]

        -- Execute the script to enable it
        autoAssemble(Zoom)

    else
        -- Code to disable the script
        local Zoom = [[

        INJECT1:
          db 3D 00 01 00 00

        unregistersymbol(INJECT1)
        dealloc(newmem)
        ]]

        -- Execute the script to disable it
        autoAssemble(Zoom)
    end
end





function UDF1_CECheckbox4Click(sender)
  local handled=true
  return handled
end




function UDF1_CECheckbox1Change(sender)
if sender.Checked then --MagicType
     local Magictype = [[
aobscanmodule(MagicType,Conquer.exe,8B 70 18 8D 45 E4) // should be unique
alloc(newmem,$1000)

label(code)
label(return)

newmem:

code:
  mov esi,18
  lea eax,[ebp-1C]
  jmp return

MagicType:
  jmp newmem
  nop
return:
registersymbol(MagicType)
]]

autoAssemble(Magictype)
else
        -- Code to disable the script
        local Magictype = [[

        MagicType:
          db 8B 70 18 8D 45 E4

        unregistersymbol(MagicType)
        dealloc(newmem)
        ]]

        -- Execute the script to disable it
        autoAssemble(Magictype)
    end
end

function UDF1_CECheckbox4Change(sender)
if sender.Checked then --Speed
   writeInteger("[Conquer.exe+134EC24] + 74 ",33)
else
   writeInteger("[Conquer.exe+134EC24] + 74 ",0)
end

end
function UDF1_CECheckbox5Change(sender)
if sender.Checked then --Auto HP
   writeInteger("[Conquer.exe+1391888] + 150", 120)
   writeInteger("[Conquer.exe+1391888] + 1C", 1)
   writeInteger("[Conquer.exe+1391888] + 160", 5)
else
    writeInteger("[Conquer.exe+1391888] + 1C", 0)
end

end

function UDF1_CECheckbox6Change(sender)
if sender.Checked then --Revive Guild Selector
local checkbox7 = getForm(0).CECheckbox7 -- Disable AutoRevive
checkbox7.Enabled = false --Disable AutoRevive
local checkbox8 = getForm(0).CECheckbox8-- Disable AutoRevive
checkbox8.Enabled = false --Disable AutoRevive

AutoAssemble[[
aobscanmodule(INJECT,Conquer.exe,8B 90 20 02 00 00 8D) // should be unique
alloc(newmem,$1000)
alloc(GetSkillS,4)
registersymbol(GetSkillS)
alloc(Get,4)
registersymbol(Get)
alloc(GuildID,4)
registersymbol(GuildID)
alloc(CheckID,4)
registersymbol(CheckID)
label(return)

newmem:
mov edx,[eax+00000220]
mov ecx,[eax+A70]
jmp GuildCheck
jmp return


GuildCheck:
cmp ecx,[[0174EC24]+A70]
je State
jmp return


State:
Cmp [eax+108],#32//DEAD
je CheckID
Cmp [eax+108],#1056//DEAD
je CheckID
Cmp [eax+108],#1120//DEAD
je CheckID
Cmp [eax+108],#96//DEAD
je CheckID
Cmp [eax+108],#980//DEAD
je CheckID
Cmp [eax+108],#990//DEAD
je CheckID
jmp return


CheckID:
cmp edx,[[0174EC24]+220]
jne SkillUse
jmp return

SkillUse:
mov [GetSkillS],edx
jmp return

INJECT:
  jmp newmem
  nop
return:
registersymbol(INJECT)
]]

AutoAssemble[[
alloc(Check_State,300)
createthread(Check_State)
label(exitnewthread)
registersymbol(exitnewthread)
label(returnhere)

Check_State:
 push #150
 Call sleep
 cmp [GetSkillS],#0
 jne Revive
jmp Check_State

Revive:
pushad
pushfd
push #1
push #0
push [GetSkillS]
push #1100
call 00441214
mov ecx,eax
call 00FEA7C6
popfd
popad
jmp End
jmp returnhere


End:
mov [GetSkillS],#0
jmp returnhere

returnhere:
cmp [exitnewthread],1
jne Check_State
ret

exitnewthread:
db 00
]]


end

end
function UDF1_CEButton4Click(sender)
shellExecute("chrome.exe", "https://discord.com/users/325297243802304523")

end

function UDF1_CECheckbox7Change(sender)

if sender.Checked then --Ninja Selector
sender.Enabled = false -- Disable Uncheck
local checkbox6 = getForm(0).CECheckbox6 -- Disable AutoRevive
checkbox6.Enabled = false --Disable AutoRevive
local checkbox8 = getForm(0).CECheckbox8 -- Disable AutoRevive
checkbox8.Enabled = false --Disable AutoRevive

AutoAssemble[[
aobscanmodule(INJECT,Conquer.exe,89 86 98 E5 00 00 E8) // should be unique
alloc(newmem,$1000)
alloc(GetSkill,4)
registersymbol(GetSkill)
label(code)
label(return)

newmem:

code:
  mov [esi+0000E598],eax
  mov [GetSkill],eax
  jmp return

INJECT:
  jmp newmem
  nop
return:
registersymbol(INJECT)

]]

AutoAssemble[[
aobscanmodule(INJECT,Conquer.exe,8B 90 20 02 00 00 8D) // should be unique
alloc(newmem,$1000)


label(return)

newmem:
mov edx,[eax+00000220]
Cmp edx,[GetSkill]
je AliveCheck
jmp return

AliveCheck:
Cmp [eax+108],#32//DEAD
jne SitCheck
Cmp [eax+108],#1056//DEAD
jne SitCheck
Cmp [eax+108],#1120//DEAD
jne SitCheck
Cmp [eax+108],#96//DEAD
jne SitCheck
Cmp [eax+108],#980//DEAD
jne SitCheck
Cmp [eax+108],#990//DEAD
jne SitCheck
jmp return


SitCheck:
cmp [[Conquer.exe+13B5668]+388],#250
jne SkillUse
jmp return

SkillUse:
pushad
pushfd
push #1
push #0
push [GetSkill] //[eax+220]
push #12080   //MONK #10405//  1100
call 00441214
mov ecx,eax
call 00FEA7C6
popfd
popad
jmp return



INJECT:
  jmp newmem
  nop
return:
registersymbol(INJECT)

]]


end
end
function UDF1_CECheckbox8Change(sender)
if sender.Checked then --Revive Selector
local checkbox6 = getForm(0).CECheckbox6 -- Disable AutoRevive
checkbox6.Enabled = false --Disable AutoRevive
local checkbox7 = getForm(0).CECheckbox7 -- Disable AutoRevive
checkbox7.Enabled = false --Disable AutoRevive
 AutoAssemble[[aobscanmodule(INJECT,Conquer.exe,8B 90 20 02 00 00 8D) // should be unique
alloc(newmem,$1000)
alloc(GetSkillS,4)
registersymbol(GetSkillS)
alloc(Get,4)
registersymbol(Get)
alloc(GuildID,4)
registersymbol(GuildID)
alloc(CheckID,4)
registersymbol(CheckID)
label(return)

newmem:
mov edx,[eax+00000220]
mov ecx,[eax+8D4]
jmp GuildCheck
jmp return


GuildCheck:
cmp ecx,[[0174EC24]+8D4]
je State
jmp return


State:
Cmp [eax+108],#32//DEAD
je CheckID
Cmp [eax+108],#1056//DEAD
je CheckID
Cmp [eax+108],#1120//DEAD
je CheckID
Cmp [eax+108],#96//DEAD
je CheckID
Cmp [eax+108],#980//DEAD
je CheckID
Cmp [eax+108],#990//DEAD
je CheckID
jmp return


CheckID:
cmp edx,[[0174EC24]+220]
jne SkillUse
jmp return

SkillUse:
mov [GetSkillS],edx
jmp return

INJECT:
  jmp newmem
  nop
return:
registersymbol(INJECT)

]]

AutoAssemble[[
alloc(Check_State,300)
createthread(Check_State)
label(exitnewthread)
registersymbol(exitnewthread)
label(returnhere)

Check_State:
 push #50
 Call sleep
 cmp [GetSkillS],#0
 jne Revive
jmp Check_State

Revive:
pushad
pushfd
push #1
push #0
push [GetSkillS]
push #1100    //MONK #10405//  1100
call 00441214
mov ecx,eax
call 00FEA7C6
popfd
popad
jmp End
jmp returnhere


End:
mov [GetSkillS],#0
jmp returnhere

returnhere:
cmp [exitnewthread],1
jne Check_State
ret

exitnewthread:
db 00


]]

end

end
